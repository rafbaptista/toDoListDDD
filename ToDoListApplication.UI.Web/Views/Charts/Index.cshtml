@using ToDoListApplication.UI.Web.Controllers

@{

}

<div class="container">
    <h2 class="font-weight-bold text-info text-center mt-3">Graphics regarding the system</h2>


    <div class="row my-3">
        <div class="chart-container position-relative col-4 py-3">
            <div class="chartWrapper p-3">
                <h6 class="text-center">Person vs Gender</h6>
                <canvas id="PersonByGender"></canvas>
            </div>
        </div>

        <div class="chart-container position-relative col-4 py-3">
            <div class="chartWrapper p-3">
                <h6 class="text-center">Person vs Age</h6>
                <canvas id="PersonByAgeBracket"></canvas>
            </div>
        </div>

        <div class="chart-container position-relative col-4 py-3">
            <div class="chartWrapper p-3">
                <h6 class="text-center">Person vs Tasks</h6>
                <canvas id="PersonByTasks"></canvas>
            </div>
        </div>
    </div>

    <div class="row my-3">
        <div class="chart-container position-relative col-4 py-3">
            <div class="chartWrapper p-3">
                <h6 class="text-center">Task vs Status</h6>
                <canvas id="TaskByStatus"></canvas>
            </div>
        </div>

        <div class="chart-container position-relative col-4 py-3">
            <div class="chartWrapper p-3">
                <h6 class="text-center">Task vs Category</h6>
                <canvas id="TaskByCategory"></canvas>
            </div>
        </div>

        <div class="chart-container position-relative col-4 py-3">
            <div class="chartWrapper p-3">
                <h6 class="text-center">Task vs Delivery Date</h6>
                <canvas id="TaskByDeliveryDate"></canvas>
            </div>
        </div>


    </div>








</div>


@section styles {
    <style>
        .chart-container {
            color: #044a90;
        }

        .chartWrapper {
            -webkit-box-shadow: 0px 0px 15px 0px rgba(176,176,176,1);
            -moz-box-shadow: 0px 0px 15px 0px rgba(176,176,176,1);
            box-shadow: 0px 0px 15px 0px rgba(176,176,176,1);
            border-radius: 5%;
        }
    </style>
}

@section scripts {
    <script>
        //store all information about all charts
        var infs;

        //Urls to get json information about the charts
        var urls = [
            '@Url.Action(nameof(ChartsController.GetTotalPersonByAgeBracket))',
            '@Url.Action(nameof(ChartsController.GetTotalPersonByGender))',
            '@Url.Action(nameof(ChartsController.GetTotalPersonWithAndWithoutTasks))',
            '@Url.Action(nameof(ChartsController.GetTotalTasksByStatus))',
            '@Url.Action(nameof(ChartsController.GetTotalTasksByCategory))',
            '@Url.Action(nameof(ChartsController.GetTotalTasksByDeliveryDate))',
        ];
        //Make a request for each url in the array and populates data
        Promise.all(urls.map(url =>
            fetch(url, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json;charset=UTF-8'
                }
            }).then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    console.log("An error occurred while trying to get charts information" + response.statusText);
                }
            }
                )
        )).then(data => {
            infs = data;
            displayPersonGenderChart();
            displayPersonByAgeBracketChart();
            displayPersonByTasks();
            displayTaskByStatus();
            displayTaskByCategory();
            displayTaskByDeliveryDate();
            })
        

        function displayPersonByAgeBracketChart() {
            var ctx = document.getElementById("PersonByAgeBracket").getContext("2d");
            var chartInfo = infs[0];
            var barChartData = {
                labels: ['0-18', '19-40', '40-60', '61+'],
                datasets: [{
                    label: 'Person',
                    backgroundColor: 'rgba(255, 159, 64, 0.2)',
                    borderColor: 'rgb(255,159,64)',
                    borderWidth: 1,
                    data: [
                        chartInfo["firstBracket"],
                        chartInfo["secondBracket"],
                        chartInfo["thirdBracket"],
                        chartInfo["fourthBracket"],
                    ]
                }]
            };
            new Chart(ctx, {
                type: 'bar',
                data: barChartData,
                options: {
                    legend: {
                        display: false,
                    },
                    tooltips: {
                        ////mode: 'index',
                        intersect: false
                    },
                    responsive: true,
                    scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            },
                            stacked: true
                        }]
                    }
                }
            });
        }
        function displayPersonGenderChart() {
            var ctx = document.getElementById("PersonByGender").getContext('2d');
            var chartInfo = infs[1];
            var config = {
                type: 'pie',
                data: {
                    labels: [
                        'Males', 'Females'
                    ],
                    datasets: [{
                        data: [
                            chartInfo["TotalMales"],
                            chartInfo["TotalFemales"],
                        ],
                        backgroundColor: [
                            'rgb(255, 99, 132)',
                            'rgb(54, 162, 235)',
                        ],
                        label: 'Person vs Gender'
                    }],
                },
                options: {
                    legend: {
                        display: true,
                    },
                    responsive: true,
                }
            };
            new Chart(ctx, config);
        }
        function displayPersonByTasks() {
            var ctx = document.getElementById("PersonByTasks");
            var chartInfo = infs[2];
            var config = {
                type: 'doughnut',
                data: {
                    labels: [
                        'With task',
                        'Without task',
                    ],
                    datasets: [{
                        data: [
                            chartInfo["withTasks"],
                            chartInfo["withoutTasks"],
                        ],
                        backgroundColor: [                            
                            'rgb(158,14,14)',
                            'rgb(255,165,0)',                           
                        ],
                        label: 'Person vs Task'
                    }],
                },
                options: {
                    legend: {
                        display: true,
                    },
                    responsive: true,
                    animation: {
                        animateScale: true,
                        animateRotate: true
                    }
                }
            };
            new Chart(ctx, config);
        }
        function displayTaskByStatus() {
            var ctx = document.getElementById("TaskByStatus");
            var chartInfo = infs[3];
            var config = {
                type: 'bar',
                data: {
                    labels: [
                        'Pending',
                        'In Progress',
                        'Completed',
                    ],
                    datasets: [{
                        data: [
                            chartInfo["Pending"],                            
                            chartInfo["InProgress"],
                            chartInfo["Completed"],                                                        
                        ],
                        backgroundColor: [                            
                            'rgba(108,214,108, 0.3)',
                            'rgba(128,0,128, 0.3)',                            
                            'rgba(0,0,255, 0.3)',
                        ],
                        borderColor: [
                            'rgb(108,214,108)',
                            'rgb(128,0,128)',
                            'rgb(0,0,255)',
                        ],
                        borderWidth: 1,
                        label: 'Task vs Status'
                    }],
                },
                options: {
                    legend: {
                        display: false,
                    },
                    responsive: true,                       
                    scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                            },
                            stacked: true,
                        }]
                    }
                }
            };
            new Chart(ctx, config);
        }
        function displayTaskByCategory() {            
            var ctx = document.getElementById("TaskByCategory");
            var chartInfo = infs[4];
            var config = {
                type: 'horizontalBar',
                data: {
                    labels: [
                        'House',
                        'Important',
                        'School',
                        'Sports',
                        'Work',
                    ],
                    datasets: [{
                        data: [
                            chartInfo["House"],
                            chartInfo["Important"],
                            chartInfo["School"],
                            chartInfo["Sports"],
                            chartInfo["Work"],                                                                                                              
                        ],
                        backgroundColor: [                            
                            'rgba(255,0,0,0.3)',
                            'rgba(255,165,0, 0.3)',
                            'rgba(255,192,203, 0.3)',
                            'rgba(128,128,128, 0.3)',
                            'rgba(0,128,0, 0.3)',
                        ],
                        borderColor: [
                            'rgb(255,0,0)',
                            'rgb(255,165,0)',
                            'rgb(255,192,203)',
                            'rgb(128,128,128)',
                            'rgb(0,128,0)',
                        ],
                        borderWidth: 1,
                        label: 'Task vs Status'
                    }],
                },
                options: {
                    legend: {
                        display: false,
                    },
                    responsive: true,
                    scales: {
                        xAxes: [{
                            ticks: {
                                beginAtZero: true
                            }   
                        }]
                    }
                }
            };
            new Chart(ctx, config);
        }
        function displayTaskByDeliveryDate() {
            var ctx = document.getElementById("TaskByDeliveryDate");
            var chartInfo = infs[5];
            var config = {
                type: 'bar',
                data: {
                    labels: [
                        '0-7 days',
                        'In 8-15 days',
                        '16-30 days',
                        '31+ days',
                    ],
                    datasets: [{
                        data: [
                            chartInfo["upTo7days"],
                            chartInfo["upTo15days"],
                            chartInfo["upTo30days"],
                            chartInfo["moreThan30days"],
                        ],
                        backgroundColor: [
                            'rgba(108,214,108, 0.3)',
                            'rgba(128,0,128, 0.3)',
                            'rgba(0,0,255, 0.3)',
                            'rgba(255,255,0, 0.3)',
                        ],
                        borderColor: [
                            'rgb(108,214,108)',
                            'rgb(128,0,128)',
                            'rgb(0,0,255)',
                            'rgb(255,255,0)',
                        ],
                        borderWidth: 1,
                        label: 'Task vs Status'
                    }],
                },
                options: {
                    legend: {
                        display: false,
                    },
                    responsive: true,
                    scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                            },
                            stacked: true,
                        }]
                    }
                }
            };
            new Chart(ctx, config);
        }
        

        
    </script>
}
